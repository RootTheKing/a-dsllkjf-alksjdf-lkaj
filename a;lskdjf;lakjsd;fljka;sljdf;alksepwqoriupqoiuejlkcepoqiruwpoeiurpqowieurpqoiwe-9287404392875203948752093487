print("Loading Rayfield UI Library...")
local RayfieldURL = "https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/refs/heads/main/source.lua"
local RayfieldSource = game:HttpGet(RayfieldURL)
local RayfieldCompiler, compileError = loadstring(RayfieldSource)
if not RayfieldCompiler then
    warn("Failed to compile Rayfield source:", compileError)
    return
end
local Rayfield = RayfieldCompiler()
if type(Rayfield) ~= "table" or not Rayfield.CreateWindow then
    warn("Rayfield did not initialize correctly.")
    return
end
print("Rayfield UI Library loaded successfully.")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local RS = ReplicatedStorage:WaitForChild("RS", 10)
local InventoryModule = nil
local successInv, invResult = pcall(function()
    InventoryModule = require(RS.Modules.Inventory)
end)
if not successInv or not InventoryModule then
    warn("Failed to require Inventory Module:", invResult)
    return
else
    print("Inventory Module loaded successfully.")
end

-- Store original GetItemStats function for later use.
local Original_GetItemStats = InventoryModule.GetItemStats
if type(Original_GetItemStats) ~= "function" then
    warn("InventoryModule.GetItemStats is not a function!")
    return
else
    print("Stored reference to original GetItemStats.")
end

local itemOverrides = {}

local function Hooked_GetItemStats(itemData, ignoreJewels, figure)
    local success, stats = pcall(Original_GetItemStats, InventoryModule, itemData, ignoreJewels, figure)
    if not success then
        warn("Error in original GetItemStats:", stats)
        return {}
    end
    if type(stats) ~= "table" then
        stats = {}
    end

    if itemData and itemData.Name and itemOverrides[itemData.Name] then
        local over = itemOverrides[itemData.Name]
        for statName, value in pairs(over) do
            stats[statName] = value
        end
    end
    return stats
end
InventoryModule.GetItemStats = Hooked_GetItemStats
print("InventoryModule.GetItemStats hooked successfully.")

print("Creating Rayfield Window...")
local Window = Rayfield:CreateWindow({
    Name = "Cheese Hub |  2.0",
    LoadingTitle = "Loading Cheese Hub...",
    LoadingSubtitle = "by AssTikklingBandit",
    Size = UDim2.fromOffset(600, 450),
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "CheeseHubConfig",
        FileName = "CheeseHubSettings"
    },
    KeySystem = false,
})
print("Window created.")

local CombatTab = Window:CreateTab("Combat", 4483362458)
print("Combat Tab created. Adding elements...")

CombatTab:CreateLabel("Item Stat Modifier")
CombatTab:CreateLabel("Enter item name and desired stats (client-side only).")

local targetItemName = ""
local inputDefense = 0
local inputAgility = 0
local inputPower = 0
local inputAttackSpeed = 0
local inputIntensity = 0
local inputResistance = 0
local inputArmorPiercing = 0
local inputAttackSize = 0
local inputRegeneration = 0
local inputInsanity = 0
local inputWarding = 0

CombatTab:CreateInput({
    Name = "Item Name",
    PlaceholderText = "e.g., Fisherman's Hat",
    Flag = "ItemName",
    Callback = function(Value)
        targetItemName = Value or ""
        print("Target item name set to:", targetItemName)
    end
})

CombatTab:CreateInput({
    Name = "Defense",
    PlaceholderText = "0",
    Numeric = true,
    Flag = "InputDefense",
    Callback = function(Value)
        inputDefense = tonumber(Value) or 0
        print("Defense set to:", inputDefense)
    end
})
CombatTab:CreateInput({
    Name = "Agility",
    PlaceholderText = "0",
    Numeric = true,
    Flag = "InputAgility",
    Callback = function(Value)
        inputAgility = tonumber(Value) or 0
        print("Agility set to:", inputAgility)
    end
})
CombatTab:CreateInput({
    Name = "Power",
    PlaceholderText = "0",
    Numeric = true,
    Flag = "InputPower",
    Callback = function(Value)
        inputPower = tonumber(Value) or 0
        print("Power set to:", inputPower)
    end
})
CombatTab:CreateInput({
    Name = "AttackSpeed",
    PlaceholderText = "0",
    Numeric = true,
    Flag = "InputAttackSpeed",
    Callback = function(Value)
        inputAttackSpeed = tonumber(Value) or 0
        print("AttackSpeed set to:", inputAttackSpeed)
    end
})
CombatTab:CreateInput({
    Name = "Intensity",
    PlaceholderText = "0",
    Numeric = true,
    Flag = "InputIntensity",
    Callback = function(Value)
        inputIntensity = tonumber(Value) or 0
        print("Intensity set to:", inputIntensity)
    end
})
CombatTab:CreateInput({
    Name = "Resistance",
    PlaceholderText = "0",
    Numeric = true,
    Flag = "InputResistance",
    Callback = function(Value)
        inputResistance = tonumber(Value) or 0
        print("Resistance set to:", inputResistance)
    end
})
CombatTab:CreateInput({
    Name = "ArmorPiercing",
    PlaceholderText = "0",
    Numeric = true,
    Flag = "InputArmorPiercing",
    Callback = function(Value)
        inputArmorPiercing = tonumber(Value) or 0
        print("ArmorPiercing set to:", inputArmorPiercing)
    end
})
CombatTab:CreateInput({
    Name = "AttackSize",
    PlaceholderText = "0",
    Numeric = true,
    Flag = "InputAttackSize",
    Callback = function(Value)
        inputAttackSize = tonumber(Value) or 0
        print("AttackSize set to:", inputAttackSize)
    end
})
CombatTab:CreateInput({
    Name = "Regeneration",
    PlaceholderText = "0",
    Numeric = true,
    Flag = "InputRegeneration",
    Callback = function(Value)
        inputRegeneration = tonumber(Value) or 0
        print("Regeneration set to:", inputRegeneration)
    end
})
CombatTab:CreateInput({
    Name = "Insanity",
    PlaceholderText = "0",
    Numeric = true,
    Flag = "InputInsanity",
    Callback = function(Value)
        inputInsanity = tonumber(Value) or 0
        print("Insanity set to:", inputInsanity)
    end
})
CombatTab:CreateInput({
    Name = "Warding",
    PlaceholderText = "0",
    Numeric = true,
    Flag = "InputWarding",
    Callback = function(Value)
        inputWarding = tonumber(Value) or 0
        print("Warding set to:", inputWarding)
    end
})

CombatTab:CreateButton({
    Name = "Set Stats for Selected Item",
    Callback = function()
        if targetItemName == "" then
            Rayfield:Notify({ Title = "Error", Content = "Please enter an item name.", Duration = 5 })
            return
        end
        itemOverrides[targetItemName] = {
            Defense = math.floor(inputDefense),
            Agility = math.floor(inputAgility),
            Power = math.floor(inputPower),
            AttackSpeed = math.floor(inputAttackSpeed),
            Intensity = math.floor(inputIntensity),
            Resistance = math.floor(inputResistance),
            ArmorPiercing = math.floor(inputArmorPiercing),
            AttackSize = math.floor(inputAttackSize),
            Regeneration = math.floor(inputRegeneration),
            Insanity = math.floor(inputInsanity),
            Warding = math.floor(inputWarding)
        }
        print("Overrides stored for:", targetItemName)
        for k, v in pairs(itemOverrides[targetItemName]) do
            print(k, v)
        end
        Rayfield:Notify({ Title = "Stats Set", Content = "Overrides applied for " .. targetItemName .. ".", Duration = 5 })
    end
})

CombatTab:CreateButton({
    Name = "Clear Stats for Selected Item",
    Callback = function()
        if targetItemName == "" then
            Rayfield:Notify({ Title = "Error", Content = "Please enter an item name.", Duration = 5 })
            return
        end
        if itemOverrides[targetItemName] then
            itemOverrides[targetItemName] = nil
            print("Cleared overrides for:", targetItemName)
            Rayfield:Notify({ Title = "Stats Cleared", Content = "Overrides removed for " .. targetItemName .. ".", Duration = 5 })
        else
            Rayfield:Notify({ Title = "Info", Content = "No override was set for " .. targetItemName .. ".", Duration = 5 })
        end
    end
})

CombatTab:CreateLabel("I like boobies")

Rayfield:LoadConfiguration()

print("Cheese Hub UI Initialized with Combat Tab.")
